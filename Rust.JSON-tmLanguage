{
    "name": "Rust",
    "scopeName": "source.rust",
    "fileTypes": ["rs"],
    "foldingStartMarker": "^.*\\bfn\\s*(\\w+\\s*)?\\([^\\)]*\\)(\\s*\\{[^\\}]*)?\\s*$",
    "foldingStopMarker": "^\\s*\\}",
    "patterns": [
        {"include": "#rust_comment_doc_block"},
        {"include": "#rust_comment_block"},
        {"include": "#rust_string"},
        {"include": "#rust_raw_string"},
        {
            "name": "storage.modifier.lifetime.source.rust",
            "match": "\\'([a-zA-Z_][a-zA-Z0-9_]*)(?!\\')\\b",
            "captures": {
                "1": { "name": "entity.name.lifetime.source.rust" }
            }
        },
        {
            "match": "(&\\'([a-zA-Z_][a-zA-Z0-9_]*)(?!\\'))\\b",
            "captures": {
                "1": { "name": "storage.modifier.lifetime.source.rust" },
                "2": { "name": "entity.name.lifetime.source.rust" }
            }
        },
        {
            "name": "string.quoted.single.source.rust",
            "begin": "\\'(?=([^\\'\\\\]|\\\\(x\\h{2}|u\\{\\h{1,6}\\}|n|r|t|0|\"|'|\\\\))\\')",
            "end": "\\'",
            "patterns": [
                {"include": "#rust_escaped_character"}
            ]
        },
        {
            "name": "meta.function.source.rust",
            "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]?[\\w\\:,+ \\'<>?]*)\\s*(?:\\()",
            "captures": {
                "1": {"name": "keyword.source.rust"},
                "2": {"name": "entity.name.function.source.rust"}
            }
        },
        {
            "name": "meta.initialization.source.rust",
            "match": "(let)\\s+(mut\\s+)?([[:alpha:]_][[:alnum:]_]*)\\s*(:.+?)?(=)",
            "captures": {
                "1": {"name": "keyword.source.rust"},
                "2": {"name": "keyword.source.rust"},
                "3": {"name": "variable.other.source.rust"},
                "4": {"name": "storage.type.source.rust"},
                "5": {"name": "keyword.operator.source.rust"}
            },
            "comment": "This matches the 'let x = val' style of variable intitialization."
        },
        {
            "name": "meta.import.source.rust",
            "match": "(extern\\s+crate)\\s+(\\w+)",
            "captures": {
                "1": {"name": "keyword.source.rust"},
                "2": {"name": "support"}
            }
        },
        {
            "name": "meta.macro.source.rust",
            "match": "\\b(macro_rules!)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?:\\{)",
            "captures": {
                "1": {"name": "keyword.source.rust"},
                "2": {"name": "entity.name.macro.source.rust"}
            }
        },
        {
            "name": "keyword.other.source.rust",
            "match": "\\b(crate|enum|extern|fn|impl|let|mod|move|mut|pub|ref|static|Self|struct|super|trait|type|unsafe|use|const|where)\\b"
        },
        {
            "name": "keyword.control.source.rust",
            "match": "\\b(break|else|for|if|loop|match|return|while|continue)\\b"
        },
        {
            "name": "keyword.operator.source.rust",
            "match": "\\b(as|in|box)\\b"
        },
        {
            "name": "invalid.illegal.source.rust",
            "match": "\\b(virtual|proc|alignof|become|offsetof|priv|pure|sizeof|typeof|unsized|yield|do|abstract|final|override|macro)\\b"
        },
        {
            "name": "constant.language.source.rust",
            "match": "\\b(true|false)\\b"
        },
        {
            "name": "variable.language.source.rust",
            "match": "\\b(self)\\b"
        },
        {
            "name": "storage.type.source.rust",
            "match": "\\b(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize|f32|f64|bool|char|str)\\b"
        },
        {
            "name": "comment.block.attribute.source.rust",
            "begin": "#!?\\[",
            "end": "\\]",
            "patterns": [
                {"include": "#rust_string"},
                {"include": "#rust_raw_string"}
            ]
        },
        {
            "name": "constant.numeric.integer.decimal.source.rust",
            "match": "\\b[0-9][0-9_]*(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize)?\\b"
        },
        {
            "name": "constant.numeric.integer.hexadecimal.source.rust",
            "match": "\\b0x[0-9a-fA-F_]*[0-9a-fA-F][0-9a-fA-F_]*(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize)?\\b"
        },
        {
            "name": "constant.numeric.integer.octal.source.rust",
            "match": "\\b0o[0-7_]*[0-7][0-7_]*(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize)?\\b"
        },
        {
            "name": "constant.numeric.integer.binary.source.rust",
            "match": "\\b0b[0-1_]*[0-1][0-1_]*(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize)?\\b"
        },
        {
            "name": "constant.numeric.float.source.rust",
            "match": "\\b[0-9][0-9_]*((f32|f64)|([eE][+-]?[0-9_]*[0-9][0-9_]*(f32|f64)?)|(\\.([0-9][0-9_]*([eE][+-]?[0-9_]*[0-9][0-9_]*)?(f32|f64)?)?))\\b"
        },
        {
            "name": "comment.line.documentation.source.rust",
            "begin": "//[!/][^/].*",
            "end": "$"
        },
        {
            "name": "comment.line.double-slash.source.rust",
            "begin": "//",
            "end": "$"
        },
        {
            "name": "keyword.operator.source.rust",
            "match": "(=>)|(->)|[-:=*,!.+|%/&~@<>;]"
        },
        {
            "name": "support.function.source.rust",
            "match": "\\b_\\b"
        },
        {
            "name": "support.function.source.rust",
            "match": "\\b(\\w+)\\b(?=\\()"
        },
        {
            "name": "support.macro.source.rust",
            "match": "\\b(\\w+!)(?=\\()"
        },
        {
            "name": "meta.namespace-block.source.rust",
            "match": "\\b(\\w+)::"
        },
        {
            "name": "meta.macro.source.rust",
            "match": "\\b(\\w+!)\\s*[({\\[]",
            "captures": {
              "1": { "name": "meta.preprocessor.source.rust" }
            }
        },
        {
            "match": "(\\[|\\]|{|}|\\(|\\))",
            "name": "punctuation.definition.bracket.source.rust"
        },
        {
            "match": "\\b(Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b",
            "name": "support.type.source.rust"
        },
        {
            "match": "\\b(drop)\\b",
            "name": "support.function.source.rust"
        }
    ],
    "repository": {
        "rust_escaped_character": {
            "name": "constant.character.escape.source.rust",
            "match": "\\\\(x\\h{2}|u\\{\\h{1,6}\\}|n|r|t|0|\"|'|\\\\)"
        },
        "rust_string": {
            "name": "string.quoted.double.source.rust",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {"include": "#rust_escaped_character"}
            ]
        },
        "rust_raw_string": {
            "name": "string.quoted.double.raw.source.rust",
            "begin": "r(#*)\"",
            "end": "\"(\\1)"
        },
        "rust_comment_block": {
            "name": "comment.block.source.rust",
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [
                {"include": "#rust_comment_block"},
                {"include": "#rust_comment_doc_block"}
            ]
        },
        "rust_comment_doc_block": {
            "name": "comment.block.documentation.source.rust",
            "begin": "/\\*[!\\*][^\\*/]",
            "end": "\\*/",
            "patterns": [
                {"include": "#rust_comment_block"},
                {"include": "#rust_comment_doc_block"}
            ]
        }
    },
    "uuid": "4339386b-4d67-4f0e-9e78-09ecbcddf71d"
}
