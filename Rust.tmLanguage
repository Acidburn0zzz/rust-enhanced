<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>Rust Syntax: version 0.1</string>
	<key>fileTypes</key>
	<array>
		<string>rs</string>
		<string>jc</string>
	</array>
	<key>foldingStartMarker</key>
	<string>^.*\bfn\s*(\w+\s*)?\([^\)]*\)(\s*\{[^\}]*)?\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*\}</string>
	<key>name</key>
	<string>Rust</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.fn.rust</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.fn.rust</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.rust</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.fn.rust</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.rust</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match regular fn like: fn myFunc(arg : type,...) { … }</string>
			<key>match</key>
			<string>\b(fn)\s+([a-zA-Z_$]\w*)?\s*(\()(([-+a-zA-Z_]+)\s?\:\s?([@~&amp;&le;&ge;\[\]A-Za-z_]+)(,)?(\n)?)*(\))</string>
			<key>name</key>
			<string>meta.fnargs.rust</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.fn.rust</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.fn.rust</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.rust</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.fn.rust</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.rust</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match regular fn like: fn myFunc(arg) { … }</string>
			<key>match</key>
			<string>\b(fn)\s+([a-zA-Z_$]\w*)?\s*(\()(?!\:.*?)(\))</string>
			<key>name</key>
			<string>meta.fn.rust</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.fn.rust</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.fn.rust</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.rust</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.fn.rust</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.rust</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match regular fn like: fn myFunc(arg) { … }</string>
			<key>match</key>
			<string>\b(mod|enum)\s+([a-zA-Z_$]\w*)?\s?\{</string>
			<key>name</key>
			<string>meta.extras.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?))\b</string>
			<key>name</key>
			<string>constant.numeric.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\s?(\#([a-zA-Z]+))</string>
			<key>name</key>
			<string>constant.special.rust</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.rust</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.rust</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.rust</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
					<key>name</key>
					<string>constant.character.escape.rust</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.rust</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.rust</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.rust</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
					<key>name</key>
					<string>constant.character.escape.rust</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*\*(?!/)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.rust</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.documentation.rust</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.rust</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.rust</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.rust</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(//).*$\n?</string>
			<key>name</key>
			<string>comment.line.double-slash.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(bool|byte|char|class|double|enum|float|f([0-9]+)|fn|int|use|uint|u([0-9]+)|i([0-9]+)|trait|impl|mod|long|mut|type|short|struct|str|mod|native|let)\b</string>
			<key>name</key>
			<string>storage.type.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(some|none|left|right|ok|err|success|failure|cons|nil)\b</string>
			<key>name</key>
			<string>constant.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(const|export|extern|pure|copy|move|extends|final|implements|native|private|protected|public|@|~)\b</string>
			<key>name</key>
			<string>storage.modifier.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(\||break|match|again|fail|in|do|else|for|to|if|import|package|return|while)\b</string>
			<key>name</key>
			<string>keyword.control.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(drop|in|new|with|as|use)\b</string>
			<key>name</key>
			<string>keyword.operator.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\btrue\b</string>
			<key>name</key>
			<string>constant.language.boolean.true.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bfalse\b</string>
			<key>name</key>
			<string>constant.language.boolean.false.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bnull\b</string>
			<key>name</key>
			<string>constant.language.null.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(self)\b</string>
			<key>name</key>
			<string>variable.language.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(log|assert)\b</string>
			<key>name</key>
			<string>keyword.other.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(std|str|io|float|consts|crypto|vec|unsafe|ptr)\b</string>
			<key>name</key>
			<string>support.class.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>!|\$|%|&amp;|\*|\-\-|\-|\+\+|\+|--&gt;|==|=|!=|!=|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\|\||\?\:|\*=|(?&lt;!\()/=|%=|\+=|\-=|&amp;=|\^=|::|\b(in)\b</string>
			<key>name</key>
			<string>keyword.operator.rust</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(:]|^|ret)\s*(/)(?![/*+{}?])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.rust</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(/)[igm]*</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.rust</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.rust</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.rust</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\;</string>
			<key>name</key>
			<string>punctuation.terminator.statement.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>,[ |\t]*</string>
			<key>name</key>
			<string>meta.delimiter.object.comma.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\.</string>
			<key>name</key>
			<string>meta.delimiter.method.period.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\{|\}</string>
			<key>name</key>
			<string>meta.brace.curly.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(|\)</string>
			<key>name</key>
			<string>meta.brace.round.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\[|\]</string>
			<key>name</key>
			<string>meta.brace.square.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(#)[a-zA-Z][a-zA-Z0-9_-]*</string>
			<key>name</key>
			<string>meta.fn.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(use)\s+(\w+)</string>
			<key>name</key>
			<string>meta.use.rust</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(import)\s+(\w+)((::)?(\w+)?)</string>
			<key>name</key>
			<string>meta.import.rust</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.rust</string>
	<key>uuid</key>
	<string>E54FA931-0668-4496-8922-F91520AD02B3</string>
</dict>
</plist>
